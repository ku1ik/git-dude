#!/bin/bash
#
# git-dude - Git commit notifier
# https://github.com/sickill/git-dude
#
# Copyright (C) 2011 Marcin Kulik <http://ku1ik.com/>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
# Distributed under the GNU General Public License, version 2.0.

set -e

interval=$(git config dude.interval || true)
interval=${interval:-60}
app_name=$(basename $0)

export LC_ALL=C # make sure git talks english

if [[ $(git config dude.notify-command) ]]; then
  notify_cmd=$(git config dude.notify-command)
elif [ $(which notify-send 2>/dev/null) ]; then
  notify_cmd='notify-send -i "$ICON_PATH" "$TITLE" "$DESCRIPTION"'
elif [ $(which terminal-notifier 2>/dev/null) ]; then
  notify_cmd='terminal-notifier -title "$TITLE" -message"$DESCRIPTION"'
elif [ $(which growlnotify 2>/dev/null) ]; then
  notify_cmd='growlnotify -n "$app_name" --image "$ICON_PATH" -m "$DESCRIPTION" "$TITLE"'
elif [ $(which kdialog 2>/dev/null) ]; then
  notify_cmd='kdialog --icon $ICON_PATH --title "$TITLE" --passivepopup "$DESCRIPTION"'
elif [ $(which notify 2>/dev/null) ]; then
  notify_cmd='notify --type information --icon "$ICON_PATH" --group "Git Commit" --title "$TITLE" "$DESCRIPTION"'
elif [ $(which terminal-notifier 2>/dev/null) ]; then
  notify_cmd='terminal-notifier -title "$TITLE" -message "$DESCRIPTION" -open "$URL"'
fi

function dudenotify() {
  local ICON_PATH="$1"
  local TITLE="$2"
  local DESCRIPTION="$3"
  local URL="$4"

  if [ -n "$notify_cmd" ]; then
    eval "$notify_cmd 2>/dev/null"
    date "+%T %D"
    echo "$TITLE"
    if [ -n "$DESCRIPTION" ]; then
      echo "$DESCRIPTION"
    fi

    if [ -n "$URL" ]; then
      echo "$URL"
    fi
  else
    echo "Sorry, you must install a notifier. Exiting ..."
    exit 1
  fi

  echo
}

[[ -d "$1" ]] && cd $1

echo "Looking for changes in $(pwd) repos every $interval/s"

while true; do
  for dir_name in *; do
    if [[ -d "$dir_name" && $(cd "$dir_name"; git rev-parse --git-dir 2>/dev/null) ]]; then

      if [[ $(cd "$dir_name"; git config dude.ignore) == true ]]; then
        continue
      fi

      repo_name=$(basename "$dir_name" .git)
      cd "$dir_name"


      changes=$(git fetch 2>&1 | grep -F -- '->' | sed 's/^ [+*=!-] //')

      if [ -n "$changes" ]; then
        echo "  new commits for $(pwd)"
      else
        echo "  nothing new for $(pwd)"
      fi

      icon_path=$(git config dude.icon || true)
      icon_path=${icon_path:-`pwd`/icon.png}
      icon_path=${icon_path// /\\ } # escape spaces before eval
      eval icon_path=$icon_path # to expand ~

      if [[ $(git config --local -l) =~ github.com[:/]([A-z0-9_-]+) ]]; then
        url="https://github.com/${BASH_REMATCH[1]}/$repo_name"
      fi

      while read -r line; do
        case $line in
          *..*)
            commit_range=$(echo "$line" | awk '{ print $1 }')
            branch_name=$(echo "$line" | awk '{ print $2 }')
            commit_messages=$(git log $commit_range --pretty=format:'%s (%an)')
            if [ -n "$url" ]; then
              compare=$(echo "$line" | awk '{ print $1 }' | sed -E 's/\.\./.../')
              commit_url="$url/compare/$compare"
            fi
            dudenotify $icon_path "New commits in $repo_name/$branch_name" "$commit_messages" "$commit_url"
            ;;
          *new\ branch*)
            branch_name=$(echo "$line" | awk '{ print $3 }')
            if [ -n "$url" ]; then
              commit_url="$url/commits/$branch_name"
            fi
            dudenotify $icon_path "New branch $repo_name/$branch_name" "Added the branch $branch_name" "$commit_url"
            ;;
          *new\ tag*)
            tag_name=$(echo "$line" | awk '{ print $3 }')
            if [ -n "$url" ]; then
              commit_url="$url/commits/$tag_name"
            fi
            dudenotify $icon_path "New tag $repo_name/$tag_name" "Added the tag $tag_name" "$commit_url"
            ;;
        esac
      done <<< "$changes"

      cd - &>/dev/null
    fi
  done

  sleep $interval
done
